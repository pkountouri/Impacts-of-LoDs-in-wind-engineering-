/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      k;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "include/initialConditions"

dimensions      [0 2 -2 0 0 0 0];

internalField   uniform $turbulentKE;

boundaryField
{
    #include "include/ABLConditions"

    N //main inlflow direction
    {
        type            atmBoundaryLayerInletK;
        #include        "include/ABLConditions"

    }

    E 
    {
        type            uniformFixedValue;
        uniformValue    constant $turbulentKE;
    }

    S// main outlet flow direction 
    {
        type            uniformFixedValue;
        uniformValue    constant $turbulentKE;
    }

    W //main inlflow direction
    {
        type            atmBoundaryLayerInletK;
        #include        "include/ABLConditions"
    }

    floor
    {
        type            kqRWallFunction;
        Cmu             0.09;
        kappa           0.41;
        value           uniform 0.1;
    }

    Buildings
    {
        type            kqRWallFunction;
        Cmu             0.09;
        kappa           0.41;
        value           uniform 0.1;
    }

    top
    {
        type            uniformFixedValue;
        uniformValue    constant $turbulentKE;
    }

    x0
    {
        type            symmetry;
       
        
    }

    y0
    {
        type            atmBoundaryLayerInletK;
	#include        "include/ABLConditions"
    }

    x1
    {
        type            symmetry;
     	
    }

    y1
    {
        type            uniformFixedValue;
	uniformValue    constant $turbulentKE;
   
    }
    
    terrain
    {
        type            kqRWallFunction;
        Cmu             0.09;
        kappa           0.41;
        value           uniform 0.1;
    }

    Terrain
    {
        type            kqRWallFunction;
        Cmu             0.09;
        kappa           0.41;
        value           uniform 0.1;
    }

    Vegetation
    {
        type            kqRWallFunction;
        Cmu             0.09;
        kappa           0.41;
        value           uniform 0.1;
    } 

    sky
    {
        type            symmetry;
        
    }
}
// ************************************************************************* //
