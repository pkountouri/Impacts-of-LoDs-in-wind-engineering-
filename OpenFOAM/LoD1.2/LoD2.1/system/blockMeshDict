/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7  
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
convertToMeters 1;


// Model coordinates //bounds of buildings and H the heighest building
//Initial coordinates 
xm0   1450;	
ym0   1350;	
zm0   10;	
xm1   2710;
ym1   2600;   
H     90;           



/*

xm0   3083.32;
ym0   -1498.88;
zm0   10;
xm1   3291.1;
ym1   264.52;
H     90;

*/

// Calculate CFD domain extension following COST732 guidelines
x0    #calc "$xm0-5*$H";
x1    #calc "$xm0-1.5*$H";
x2    #calc "$xm1+1.5*$H";
x3    #calc "$xm1+5*$H";	
y0    #calc "$ym0-5*$H";	
y1    #calc "$ym0-1.5*$H";	
y2    #calc "$ym1+5*$H";	
y3    #calc "$ym1+15*$H";
terrain    $zm0;
z1    #calc "1.5*$H";
z2    #calc "$H+1.5*$H";
sky   #calc "$H+5*$H";

/*

zm0   10;
H     90;

x0    1322.99;
x1    1764.71;
x2    2691.08;
x3    4145.91;
y0    -244.314;
y1    -302.075;
y2    816.273;
y3    1614.52;
/*
terrain    $zm0;	
z1    #calc "1.5*$H";
z2    #calc "$H+1.5*$H";
sky   #calc "$H+5*$H";   

*/
/*
p     3.14159;

x0    #calc "$x_0*cos(-52.45*$p/180)-$y_0*sin(-52.45*$p/180)";
y0    #calc "$x_0*sin(-52.45*$p/180)+$y_0*cos(-52.45*$p/180)";

x1    #calc "$x_1*cos(-52.45*$p/180)-$y_1*sin(-52.45*$p/180)";
y1    #calc "$x_1*sin(-52.45*$p/180)+$y_1*cos(-52.45*$p/180)";

x2    #calc "$x_2*cos(-52.45*$p/180)-$y_2*sin(-52.45*$p/180)";
y2    #calc "$x_2*sin(-52.45*$p/180)+$y_2*cos(-52.45*$p/180)";

x3    #calc "$x_3*cos(-52.45*$p/180)-$y_3*sin(-52.45*$p/180)";
y3    #calc "$x_3*sin(-52.45*$p/180)+$y_3*cos(-52.45*$p/180)";
*/

// Units resolution per direction
xd1   22;  	
yd1   21;  
xd2   12;	
yd2   12;       	
zd1    9; 	
zd2   14; 	
zd3   38;  	

// Number of cell grids per direction
xn1    #calc "std::floor( ($x1 - $x0)/$xd1 )";
yn1    #calc "std::floor( ($y1 - $y0)/$yd1 )";
xn2    #calc "std::floor( ($x2 - $x1)/$xd2 )";
yn2    #calc "std::floor( ($y2 - $y1)/$yd2 )";
yn3    #calc "std::floor( ($y3 - $y2)/$yd1 )";
zn1    #calc "std::floor( ($z1 - $terrain)/$zd1 )";
zn2    #calc "std::floor( ($z2 - $z1)/$zd2 )";
zn3    #calc "std::floor( ($sky - $z2)/$zd3 )";

vertices
(
     ($x0   $y0   $terrain) //0
     ($x1   $y0   $terrain) //1
     ($x2   $y0   $terrain) //2
     ($x3   $y0   $terrain) //3
     ($x3   $y0   $z1)      //4 
     ($x2   $y0   $z1)      //5
     ($x1   $y0   $z1)      //6
     ($x0   $y0   $z1)	    //7
     ($x0   $y0   $z2)	    //8
     ($x1   $y0   $z2)	    //9
     ($x2   $y0   $z2)	    //10
     ($x3   $y0   $z2)	    //11
     ($x3   $y0   $sky)	    //12
     ($x2   $y0   $sky)	    //13
     ($x1   $y0   $sky)	    //14
     ($x0   $y0   $sky)	    //15
     ($x0   $y1   $terrain) //16
     ($x1   $y1   $terrain) //17
     ($x2   $y1   $terrain) //18
     ($x3   $y1   $terrain) //19
     ($x3   $y1   $z1)      //20 
     ($x2   $y1   $z1)      //21
     ($x1   $y1   $z1)      //22
     ($x0   $y1   $z1)	    //23
     ($x0   $y1   $z2)	    //24
     ($x1   $y1   $z2)	    //25
     ($x2   $y1   $z2)	    //26
     ($x3   $y1   $z2)	    //27
     ($x3   $y1   $sky)	    //28
     ($x2   $y1   $sky)	    //29
     ($x1   $y1   $sky)	    //30
     ($x0   $y1   $sky)	    //31
     ($x0   $y2   $terrain) //32
     ($x1   $y2   $terrain) //33
     ($x2   $y2   $terrain) //34
     ($x3   $y2   $terrain) //35
     ($x3   $y2   $z1)      //36 
     ($x2   $y2   $z1)      //37
     ($x1   $y2   $z1)      //38
     ($x0   $y2   $z1)	    //39
     ($x0   $y2   $z2)	    //40
     ($x1   $y2   $z2)	    //41
     ($x2   $y2   $z2)	    //42
     ($x3   $y2   $z2)	    //43
     ($x3   $y2   $sky)	    //44
     ($x2   $y2   $sky)	    //45
     ($x1   $y2   $sky)	    //46
     ($x0   $y2   $sky)	    //47
     ($x0   $y3   $terrain) //48
     ($x1   $y3   $terrain) //49
     ($x2   $y3   $terrain) //50
     ($x3   $y3   $terrain) //51
     ($x3   $y3   $z1)      //52 
     ($x2   $y3   $z1)      //53
     ($x1   $y3   $z1)      //54
     ($x0   $y3   $z1)	    //55
     ($x0   $y3   $z2)	    //56
     ($x1   $y3   $z2)	    //57
     ($x2   $y3   $z2)	    //58
     ($x3   $y3   $z2)	    //59
     ($x3   $y3   $sky)	    //60
     ($x2   $y3   $sky)	    //61
     ($x1   $y3   $sky)	    //62
     ($x0   $y3   $sky)	    //63
);

blocks
(
     
    //hex (23 22 6 7 16 17 1 0) ($xn1 $yn1 $zn1) simpleGrading (0.5 0.33 1)	
   
    hex (0 1 17 16 7 6 22 23) ($xn1 $yn1 $zn1) simpleGrading (0.5 0.33 1)
    hex (1 2 18 17 6 5 21 22) ($xn2 $yn1 $zn1) simpleGrading (1 0.33 1) 	
    hex (2 3 19 18 5 4 20 21) ($xn1 $yn1 $zn1) simpleGrading (2 0.33 1) 	
    hex (7 6 22 23 8 9 25 24) ($xn1 $yn1 $zn2) simpleGrading (0.5 0.33 1.5) 	
    hex (6 5 21 22 9 10 26 25) ($xn2 $yn1 $zn2) simpleGrading (1 0.33 1.5) 
    hex (5 4 20 21 10 11 27 26) ($xn1 $yn1 $zn2) simpleGrading (2 0.33 1.5)
    hex (8 9 25 24 15 14 30 31) ($xn1 $yn1 $zn3) simpleGrading (0.5 0.33 4)
    hex (9 10 26 25 14 13 29 30) ($xn2 $yn1 $zn3) simpleGrading (1 0.33 4)
    hex (10 11 27 26 13 12 28 29) ($xn1 $yn1 $zn3) simpleGrading (2 0.33 4)

    hex (16 17 33 32 23 22 38 39) ($xn1 $yn2 $zn1) simpleGrading (0.5 1 1)
    hex (17 18 34 33 22 21 37 38) ($xn2 $yn2 $zn1) simpleGrading (1 1 1)
    hex (18 19 35 34 21 20 36 37) ($xn1 $yn2 $zn1) simpleGrading (2 1 1)
    hex (23 22 38 39 24 25 41 40) ($xn1 $yn2 $zn2) simpleGrading (0.5 1 1.5)
    hex (22 21 37 38 25 26 42 41) ($xn2 $yn2 $zn2) simpleGrading (1 1 1.5)
    hex (21 20 36 37 26 27 43 42) ($xn1 $yn2 $zn2) simpleGrading (2 1 1.5)
    hex (24 25 41 40 31 30 46 47) ($xn1 $yn2 $zn3) simpleGrading (0.5 1 4)
    hex (25 26 42 41 30 29 45 46) ($xn2 $yn2 $zn3) simpleGrading (1 1 4)
    hex (26 27 43 42 29 28 44 45) ($xn1 $yn2 $zn3) simpleGrading (2 1 4)

    hex (32 33 49 48 39 38 54 55) ($xn1 $yn3 $zn1) simpleGrading (0.5 3 1)
    hex (33 34 50 49 38 37 53 54) ($xn2 $yn3 $zn1) simpleGrading (1 3 1)
    hex (34 35 51 50 37 36 52 53) ($xn1 $yn3 $zn1) simpleGrading (2 3 1)
    hex (39 38 54 55 40 41 57 56) ($xn1 $yn3 $zn2) simpleGrading (0.5 3 1.5)
    hex (38 37 53 54 41 42 58 57) ($xn2 $yn3 $zn2) simpleGrading (1 3 1.5)
    hex (37 36 52 53 42 43 59 58) ($xn1 $yn3 $zn2) simpleGrading (2 3 1.5)
    hex (40 41 57 56 47 46 62 63) ($xn1 $yn3 $zn3) simpleGrading (0.5 3 4)
    hex (41 42 58 57 46 45 61 62) ($xn2 $yn3 $zn3) simpleGrading (1 3 4)
    hex (42 43 59 58 45 44 60 61) ($xn1 $yn3 $zn3) simpleGrading (2 3 4)

);

edges
(
);

boundary
(
    x0
    {
        type symmetry;
        faces
        (
            (0 7 23 16)
	    (16 23 39 32)
	    (32 39 55 48)
            (7 8 24 23)
	    (23 24 40 39)
	    (39 40 56 55)
            (8 15 31 24)
	    (24 31 47 40)
	    (40 47 63 56)
        );
    }
    y0
    {
        type patch;
        faces
        (
            (0 1 6 7)
	    (1 2 5 6)
	    (2 3 4 5)
	    (7 6 9 8)
	    (6 5 10 9)
	    (5 4 11 10)
	    (8 9 14 15)
	    (9 10 13 14)
	    (10 11 12 13)
        );
    }
    x1
    {
        type symmetry;
        faces
        (
            (3 19 20 4)
	    (19 35 36 20)
	    (35 51 52 36)
            (4 20 27 11)
	    (20 36 43 27)
	    (36 52 59 43)
            (11 27 28 12)
	    (27 43 44 28)
	    (43 59 60 44)
        );
    }
    y1
    {
        type patch;
        faces
        (
            (48 55 54 49)
	    (49 54 53 50)
	    (50 53 52 51)
	    (55 56 57 54)
	    (54 57 58 53)
	    (53 58 59 52)
	    (56 63 62 57)
	    (57 62 61 58)
	    (58 61 60 59)
        );
    }
    terrain
    {
        type wall;
        faces
        (
            (0 16 17 1)
	    (1 17 18 2)
	    (2 18 19 3)
            (16 32 33 17)
	    (17 33 34 18)
	    (18 34 35 19)
            (32 48 49 33)
	    (33 49 50 34)
	    (34 50 51 35)
        );
    }
    sky
    {
        type symmetry;
        faces
        (
            (15 14 30 31)
	    (14 13 29 30)
	    (13 12 28 29)
            (31 30 46 47)
	    (30 29 45 46)
	    (29 28 44 45)
            (47 46 62 63)
	    (46 45 61 62)
	    (45 44 60 61)
        );
    }
);

mergePatchPairs
(
);


// ************************************************************************* //
